/*
 * Copyright (C) 2019-2020 LEIDOS.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/!* To make a new mock driver, just replace all of the "insert" variables with the names that you want
* you may also want to add more publishers and subscribers, to do that just copy and paste the type that you want and follow the 
* example on how to do it */ 

#pragma once

#include "cpp_mock_drivers/MockDriver.h"
#include <msg_include>

namespace mock_drivers{

    class InsertDriverName : public MockDriver {

        private:

            boost::shared_ptr<ROSComms<insert_pub_msg_1>> name_1_ptr_;
            boost::shared_ptr<ROSComms<insert_sub_msg_1>> name_2_ptr_;

            void insertCallback1(insert_sub_msg_1 msg);

        public:

            InsertDriverName();
            InsertDriverName(bool true);
            int run();
            void parserCB(const carma_simulation_msgs::BagData::ConstPtr& msg);
            bool driverDiscovery();

    };

}