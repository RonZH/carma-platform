/*
 * Copyright (C) 2019-2020 LEIDOS.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

#include "rosbag_mock_drivers/InsertDriverName.h"

/!* To make a new mock driver, just replace all of the "insert" variables with the names that you want
* you may also want to add more publishers and subscribers, to do that just copy and paste the type that you want and follow the 
* example on how to do it.
* Also, be sure to add functionality to the driverDiscovery and parserCB functions!
*/ 

namespace mock_drivers{

    bool InsertDriverName::driverDiscovery(){

    }
    
    void InsertDriverName::parserCB(const carma_simulation_msgs::BagData::ConstPtr& msg){
        
    }

    void InsertDriverName::insertCallback1(insert_sub_msg_1 msg){

    };

    InsertDriverName::InsertDriverName(){

        name_1_ptr_ = boost::make_shared<ROSComms<insert_pub_msg_1>>(ROSComms<insert_pub_msg_1>(CommTypes::pub, false, 10, "insert_pub_topic_1"));
        
        std::function<void(insert_sub_msg_1)> callback_ptr_1 = std::bind(&InsertDriverName::insertCallback1, this, std::placeholders::_1);
        name_2_ptr_ = boost::make_shared<ROSComms<insert_sub_msg_1>>(ROSComms<insert_sub_msg_1>(callback_ptr_1, CommTypes::sub, false, 10, "insert_sub_topic_1"));
    }

    InsertDriverName::InsertDriverName(bool dummy){

        mock_driver_node_ = MockDriverNode(dummy);

        name_1_ptr_ = boost::make_shared<ROSComms<insert_pub_msg_1>>(ROSComms<insert_pub_msg_1>(CommTypes::pub, false, 10, "insert_pub_topic_1"));
        
        std::function<void(insert_sub_msg_1)> callback_ptr_1 = std::bind(&InsertDriverName::insertCallback1, this, std::placeholders::_1);
        name_2_ptr_ = boost::make_shared<ROSComms<insert_sub_msg_1>>(ROSComms<insert_sub_msg_1>(callback_ptr_1, CommTypes::sub, false, 10, "insert_sub_topic_1"));
    }


    int InsertDriverName::run(){

        // bag parser subscriber
        mock_driver_node_.addSub<boost::shared_ptr<ROSComms<const carma_simulation_msgs::BagData::ConstPtr&>>>(bag_parser_sub_ptr_);

        // driver publishers and subscribers
        mock_driver_node_.addPub<boost::shared_ptr<ROSComms<insert_pub_msg_1>>>(name_1_ptr_);
        mock_driver_node_.addSub<boost::shared_ptr<ROSComms<insert_sub_msg_1>>>(name_2_ptr_);

        // driver discovery publisher
        mock_driver_node_.addPub<boost::shared_ptr<ROSComms<cav_msgs::DriverStatus>>>(driver_discovery_pub_ptr_);
        mock_driver_node_.setSpinCallback(std::bind(&InsertDriverName::driverDiscovery, this));

        mock_driver_node_.spin(1);

        return 0;
    }

}